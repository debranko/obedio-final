"use client"

import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { format, differenceInDays } from "date-fns"
import {
  Edit,
  Save,
  BellOff,
  Bell,
  Clock,
  Thermometer,
  Coffee,
  Wine,
  Home,
  Calendar,
  User,
  Users,
  Crown,
  History,
  ChevronDown,
  ChevronUp,
  Trash2,
  LogOut,
} from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Separator } from "@/components/ui/separator"
import { Slider } from "@/components/ui/slider"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { useToast } from "@/components/ui/use-toast"
import { StatusBadge } from "@/components/ui-patterns/status-badge"

export interface GuestPreferences {
  food: string[]
  drinks: string[]
  roomTemperature: number
  cleaningTime: "Morning" | "Afternoon" | "Evening"
  dndActive: boolean
  dndLocations: string[]
}

export interface ServiceRequest {
  id: number
  type: string
  room: string
  status: "completed" | "pending" | "in-progress"
  timestamp: string
  description?: string
}

export interface GuestDetailProps {
  id: number
  name: string
  isVip: boolean
  room: string | null
  guestType: "Owner" | "Guest" | "Family" | "Staff" | "Charter"
  partySize?: number
  guestTag?: string
  arrivalDate: string | Date
  departureDate: string | Date
  preferences: GuestPreferences
  notes: string | null
  broker?: string | null
  serviceHistory?: ServiceRequest[]
  isExpanded: boolean
  onToggleExpand: () => void
  onCheckOut: (id: number) => void
  onChangeCabin: (id: number) => void
  onDelete: (id: number) => void
  onUpdate: (id: number, data: any) => void
  propertyType: "Private Yacht" | "Charter Yacht" | "Villa" | "Hotel"
}

export function GuestDetailPanel({
  id,
  name,
  isVip,
  room,
  guestType,
  partySize,
  guestTag,
  arrivalDate,
  departureDate,
  preferences,
  notes,
  broker,
  serviceHistory = [],
  isExpanded,
  onToggleExpand,
  onCheckOut,
  onChangeCabin,
  onDelete,
  onUpdate,
  propertyType,
}: GuestDetailProps) {
  const { toast } = useToast()
  const [isEditing, setIsEditing] = useState(false)
  const [editedNotes, setEditedNotes] = useState(notes || "")
  // Ensure all required fields exist with default values if missing
  const [editedPreferences, setEditedPreferences] = useState<GuestPreferences>({
    food: preferences?.food || [],
    drinks: preferences?.drinks || [],
    roomTemperature: preferences?.roomTemperature || 22,
    cleaningTime: preferences?.cleaningTime || "Morning",
    dndActive: preferences?.dndActive || false,
    dndLocations: preferences?.dndLocations || []
  })

  // Calculate days remaining
  const arrivalDateObj = arrivalDate instanceof Date ? arrivalDate : new Date(arrivalDate)
  const departureDateObj = departureDate instanceof Date ? departureDate : new Date(departureDate)
  const daysRemaining = differenceInDays(departureDateObj, new Date())

  // Helper function for food emojis
  const getFoodEmoji = (food: string): string => {
    const lowerFood = food.toLowerCase();
    if (lowerFood.includes("riba") || lowerFood.includes("fish")) return "🐟";
    if (lowerFood.includes("meso") || lowerFood.includes("meat")) return "🥩";
    if (lowerFood.includes("vegetarijansko") || lowerFood.includes("vegetarian")) return "🥗";
    if (lowerFood.includes("voće") || lowerFood.includes("fruit")) return "🍎";
    if (lowerFood.includes("desert") || lowerFood.includes("dessert") || lowerFood.includes("slatkiš")) return "🍰";
    if (lowerFood.includes("jaja") || lowerFood.includes("eggs")) return "🥚";
    if (lowerFood.includes("pasta") || lowerFood.includes("tjestenina")) return "🍝";
    if (lowerFood.includes("salata") || lowerFood.includes("salad")) return "🥗";
    if (lowerFood.includes("jastog") || lowerFood.includes("lobster")) return "🦞";
    if (lowerFood.includes("hleb") || lowerFood.includes("kruh") || lowerFood.includes("bread")) return "🍞";
    return "🍽️"; // Default emoji
  }

  // Helper function for drink emojis
  const getDrinkEmoji = (drink: string): string => {
    const lowerDrink = drink.toLowerCase();
    if (lowerDrink.includes("vino") || lowerDrink.includes("wine")) return "🍷";
    if (lowerDrink.includes("pivo") || lowerDrink.includes("beer")) return "🍺";
    if (lowerDrink.includes("whisky") || lowerDrink.includes("viski")) return "🥃";
    if (lowerDrink.includes("kafa") || lowerDrink.includes("coffee")) return "☕";
    if (lowerDrink.includes("čaj") || lowerDrink.includes("tea")) return "🍵";
    if (lowerDrink.includes("koktel") || lowerDrink.includes("cocktail")) return "🍸";
    if (lowerDrink.includes("sok") || lowerDrink.includes("juice")) return "🧃";
    if (lowerDrink.includes("voda") || lowerDrink.includes("water")) return "💧";
    if (lowerDrink.includes("gin")) return "🍸";
    if (lowerDrink.includes("rum")) return "🥃";
    return "🥤"; // Default emoji
  }

  // Handle save changes
  const handleSaveChanges = () => {
    onUpdate(id, {
      notes: editedNotes,
      preferences: editedPreferences,
    })
    setIsEditing(false)
    toast({
      title: "Changes saved",
      description: "Guest preferences have been updated.",
    })
  }

  // Get guest type badge color
  const getGuestTypeBadgeColor = () => {
    switch (guestType) {
      case "Owner":
        return "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400"
      case "Guest":
        return "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400"
      case "Family":
        return "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400"
      case "Staff":
        return "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-400"
      case "Charter":
        return "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400"
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-400"
    }
  }

  // Get cleaning time icon
  const getCleaningTimeIcon = () => {
    switch (editedPreferences.cleaningTime) {
      case "Morning":
        return <Coffee className="h-4 w-4 mr-1" />
      case "Afternoon":
        return <Clock className="h-4 w-4 mr-1" />
      case "Evening":
        return <Wine className="h-4 w-4 mr-1" />
      default:
        return <Clock className="h-4 w-4 mr-1" />
    }
  }

  // Get service status badge
  const getServiceStatusBadge = (status: string) => {
    switch (status) {
      case "completed":
        return <StatusBadge status="completed" className="text-xs" />
      case "in-progress":
        return <StatusBadge status="in-progress" className="text-xs" />
      case "pending":
        return <StatusBadge status="pending" className="text-xs" />
      default:
        return <StatusBadge status="pending" className="text-xs" />
    }
  }

  return (
    <div className="overflow-hidden">
      <Card
        className={`transition-shadow hover:shadow-md cursor-pointer ${
          isExpanded ? "border-primary" : ""
        }`}
        onClick={onToggleExpand}
      >
        <CardContent className="p-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-3">
              <div>
                <h3 className="font-medium flex items-center gap-1.5">
                  {name}
                  {isVip && (
                    <Badge className="bg-amber-100 text-amber-800 hover:bg-amber-100 ml-1">
                      <Crown className="h-3 w-3 mr-1" />
                      VIP
                    </Badge>
                  )}
                </h3>
                <div className="text-sm text-muted-foreground flex flex-wrap items-center gap-1.5">
                  <Badge variant="outline" className={getGuestTypeBadgeColor()}>
                    {guestType}
                  </Badge>
                  {partySize && partySize > 1 && (
                    <Badge variant="outline">
                      <Users className="h-3 w-3 mr-1" />
                      {partySize}
                    </Badge>
                  )}
                  {room ? (
                    <span className="text-xs">
                      <Home className="h-3 w-3 inline mr-1" />
                      {room}
                    </span>
                  ) : (
                    <span className="text-xs italic">No room assigned</span>
                  )}
                </div>
              </div>
            </div>
            <div className="flex items-center">
              <div className="text-right mr-2">
                <div className="text-sm font-medium">
                  {daysRemaining > 0 ? `${daysRemaining} days left` : "Departing today"}
                </div>
                <div className="text-xs text-muted-foreground">
                  {format(departureDateObj, "MMM dd, yyyy")}
                </div>
              </div>
              {isExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
            </div>
          </div>
        </CardContent>
      </Card>

      <AnimatePresence>
        {isExpanded && (
          <motion.div
            key="content"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className="overflow-hidden border border-border rounded-md mt-1 p-4"
          >
            <div className="flex justify-between">
              <div className="text-xl font-semibold flex items-center gap-2">
                <User className="h-5 w-5" />
                Guest Details
              </div>
              {isEditing ? (
                <Button onClick={handleSaveChanges} size="sm" className="h-8">
                  <Save className="h-4 w-4 mr-1" />
                  Save Changes
                </Button>
              ) : (
                <Button onClick={() => setIsEditing(true)} variant="outline" size="sm" className="h-8">
                  <Edit className="h-4 w-4 mr-1" />
                  Edit
                </Button>
              )}
            </div>

            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Left column */}
              <div>
                {/* Basic info */}
                <div className="space-y-4">
                  <div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label className="text-xs text-muted-foreground">Arrival Date</Label>
                        <div className="font-medium">
                          {format(arrivalDateObj, "MMM dd, yyyy")}
                        </div>
                      </div>
                      <div>
                        <Label className="text-xs text-muted-foreground">Departure Date</Label>
                        <div className="font-medium">{format(departureDateObj, "MMM dd, yyyy")}</div>
                      </div>
                    </div>
                  </div>

                  {/* Room and Status */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label className="text-xs text-muted-foreground">Room</Label>
                      <div className="font-medium">{room || "None assigned"}</div>
                    </div>
                    <div>
                      <Label className="text-xs text-muted-foreground">Status</Label>
                      <div className="font-medium">Checked-In</div>
                    </div>
                  </div>

                  {/* Broker info if available */}
                  {broker && (
                    <div>
                      <Label className="text-xs text-muted-foreground">Broker</Label>
                      <div className="font-medium">{broker}</div>
                    </div>
                  )}


                </div>
              </div>

              {/* Right column */}
              <div>
                <div className="space-y-6">
                  {/* Guest Preferences */}
                  <div>
                    <Label className="text-xs text-muted-foreground">Room</Label>
                    <div className="font-medium">{room || "None assigned"}</div>
                  </div>
                  <div>
                    <Label className="text-xs text-muted-foreground">Status</Label>
                    <div className="font-medium">Checked-In</div>
                  </div>
                </div>

                {/* Broker info if available */}
                {broker && (
                  <div>
                    <Label className="text-xs text-muted-foreground">Broker</Label>
                    <div className="font-medium">{broker}</div>
                  </div>
                )}
              </div>
            </div>

            {/* Right column */}
            <div>
              <div className="space-y-6">
                {/* Guest Preferences */}
                <div>
                  <Label className="text-lg font-medium">Preferences</Label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                    {/* Food preferences */}
                    <div className="bg-muted/30 p-3 rounded-md">
                      <Label className="text-xs text-muted-foreground">Food</Label>
                      <div className="text-xs text-muted-foreground mt-1 mb-1">
                        Unesite preference hrane odvojene zarezima
                        <span className="ml-1 text-gray-400 cursor-help" title="Npr. Riba, Vegetarijansko, Meso">ℹ️</span>
                      </div>
                      {!isEditing ? (
                        <div>
                          {editedPreferences.food && editedPreferences.food.length > 0 ? (
                            <div className="mt-2 flex flex-wrap gap-1">
                              {editedPreferences.food.map((food, index) => (
                                <Badge key={index} variant="outline" className="bg-green-50 text-green-700">
                                  {getFoodEmoji(food)} {food}
                                </Badge>
                              ))}
                            </div>
                          ) : (
                            <div className="text-sm text-muted-foreground italic">Nisu definisane preference hrane</div>
                          )}
                        </div>
                      ) : (
                        <div>
                          <Input
                            value={editedPreferences.food.join(", ")}
                            onChange={(e) =>
                              setEditedPreferences({
                                ...editedPreferences,
                                food: e.target.value
                                  .split(",")
                                  .map((item) => item.trim())
                                  .filter(Boolean),
                              })
                            }
                            placeholder="Npr. Riba, Paste, Salate, Vegetarijansko..."
                            className="mt-1 text-sm"
                          />
                          {editedPreferences.food && editedPreferences.food.length > 0 && (
                            <div className="mt-2 flex flex-wrap gap-1">
                              {editedPreferences.food.map((food, index) => (
                                <Badge key={index} variant="outline" className="bg-green-50 text-green-700">
                                  {getFoodEmoji(food)} {food}
                                </Badge>
                              ))}
                            </div>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Drink preferences */}
                    <div className="bg-muted/30 p-3 rounded-md">
                      <Label className="text-xs text-muted-foreground">Drinks</Label>
                      <div className="text-xs text-muted-foreground mt-1 mb-1">
                        Unesite preference pića odvojene zarezima
                        <span className="ml-1 text-gray-400 cursor-help" title="Npr. Crno vino, Espresso, Viski">ℹ️</span>
                      </div>
                      {!isEditing ? (
                        <div>
                          {editedPreferences.drinks && editedPreferences.drinks.length > 0 ? (
                            <div className="mt-2 flex flex-wrap gap-1">
                              {editedPreferences.drinks.map((drink, index) => (
                                <Badge key={index} variant="outline" className="bg-blue-50 text-blue-700">
                                  {getDrinkEmoji(drink)} {drink}
                                </Badge>
                              ))}
                            </div>
                          ) : (
                            <div className="text-sm text-muted-foreground italic">Nisu definisane preference pića</div>
                          )}
                        </div>
                      ) : (
                        <div>
                          <Input
                            value={editedPreferences.drinks.join(", ")}
                            onChange={(e) =>
                              setEditedPreferences({
                                ...editedPreferences,
                                drinks: e.target.value
                                  .split(",")
                                  .map((item) => item.trim())
                                  .filter(Boolean),
                              })
                            }
                            placeholder="Npr. Crno vino, Gin tonic, Espresso..."
                            className="mt-1 text-sm"
                          />
                          {editedPreferences.drinks && editedPreferences.drinks.length > 0 && (
                            <div className="mt-2 flex flex-wrap gap-1">
                              {editedPreferences.drinks.map((drink, index) => (
                                <Badge key={index} variant="outline" className="bg-blue-50 text-blue-700">
                                  {getDrinkEmoji(drink)} {drink}
                                </Badge>
                              ))}
                            </div>
                                ))}
                              </div>
                            ) : (
                              <span className="text-sm text-muted-foreground italic">None specified</span>
                            )}
                          </div>
                        )}
                      </div>

                      {/* Room Temperature */}
                      <div className="bg-muted/30 p-3 rounded-md">
                        <Label className="text-xs text-muted-foreground flex items-center">
                          <Thermometer className="h-3.5 w-3.5 mr-1" />
                          Room Temperature
                        </Label>
                        {isEditing ? (
                          <div className="flex items-center gap-2 mt-2">
                            <Slider
                              value={[editedPreferences.roomTemperature]}
                              min={18}
                              max={28}
                              step={1}
                              onValueChange={(value) =>
                                setEditedPreferences({
                                  ...editedPreferences,
                                  roomTemperature: value[0],
                                })
                              }
                              className="flex-1"
                            />
                            <span className="text-sm w-8 text-right">{editedPreferences.roomTemperature}°C</span>
                          </div>
                        ) : (
                          <div className="text-sm mt-1">
                            <Badge>{editedPreferences.roomTemperature}°C</Badge>
                          </div>
                        )}
                      </div>

                      {/* Cleaning Time */}
                      <div className="bg-muted/30 p-3 rounded-md">
                        <Label className="text-xs text-muted-foreground flex items-center">
                          <Clock className="h-3.5 w-3.5 mr-1" />
                          Cleaning Time
                        </Label>
                        {isEditing ? (
                          <Select
                            value={editedPreferences.cleaningTime}
                            onValueChange={(value: "Morning" | "Afternoon" | "Evening") =>
                              setEditedPreferences({
                                ...editedPreferences,
                                cleaningTime: value,
                              })
                            }
                          >
                            <SelectTrigger className="mt-1 text-sm">
                              <SelectValue placeholder="Preferred cleaning time" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="Morning">Morning</SelectItem>
                              <SelectItem value="Afternoon">Afternoon</SelectItem>
                              <SelectItem value="Evening">Evening</SelectItem>
                            </SelectContent>
                          </Select>
                        ) : (
                          <div className="text-sm mt-1">
                            <Badge className="flex items-center">
                              {getCleaningTimeIcon()}
                              {editedPreferences.cleaningTime}
                            </Badge>
                          </div>
                        )}
                      </div>

                      {/* Do Not Disturb */}
                      <div className="bg-muted/30 p-3 rounded-md col-span-full">
                        <div className="flex justify-between items-start">
                          <Label className="text-xs text-muted-foreground">Do Not Disturb (DND)</Label>
                          {isEditing ? (
                            <Switch
                              checked={editedPreferences.dndActive}
                              onCheckedChange={(checked) =>
                                setEditedPreferences({
                                  ...editedPreferences,
                                  dndActive: checked,
                                })
                              }
                            />
                          ) : (
                            <Badge variant="outline" className={editedPreferences.dndActive ? "bg-red-100" : ""}>
                              {editedPreferences.dndActive ? (
                                <BellOff className="h-3.5 w-3.5 mr-1" />
                              ) : (
                                <Bell className="h-3.5 w-3.5 mr-1" />
                              )}
                              {editedPreferences.dndActive ? "Active" : "Inactive"}
                            </Badge>
                          )}
                        </div>

                      </div>
                    </div>
                  </div>

                  {/* Notes */}
                  <div>
                    <Label className="text-lg font-medium">Notes & Information</Label>
                    {!isEditing ? (
                      <div className="mt-2 p-3 bg-muted/50 rounded-md text-sm min-h-[100px]">
                        {editedNotes || <span className="text-muted-foreground italic">No notes available</span>}
                      </div>
                    ) : (
                      <Textarea
                        value={editedNotes}
                        onChange={(e) => setEditedNotes(e.target.value)}
                        placeholder="Enter notes about this guest..."
                        className="mt-2 min-h-[100px]"
                      />
                    )}
                  </div>
                </div>
              </div>

              <Separator className="my-4" />

              {/* Actions */}
              <div className="flex justify-end gap-2">
                <Button variant="outline" size="sm" onClick={() => onChangeCabin(id)}>
                  <Home className="h-4 w-4 mr-1" />
                  Change Cabin
                </Button>
                {!propertyType.includes("Private") && (
                  <Button variant="outline" size="sm" onClick={() => onCheckOut(id)}>
                    <LogOut className="h-4 w-4 mr-1" />
                    Check-Out
                  </Button>
                )}
                <Button
                  variant="outline"
                  size="sm"
                  className="text-destructive hover:text-destructive"
                  onClick={() => onDelete(id)}
                >
                  <Trash2 className="h-4 w-4 mr-1" />
                  Delete
                </Button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}
