"use client"

import { useState, useEffect, useMemo } from 'react'
import { UserPlus, Search, Filter, AlertCircle, X, Camera, Info } from 'lucide-react'
import { useRouter } from 'next/navigation'

import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Spinner } from '@/components/ui/spinner'
import { useToast } from '@/components/ui/use-toast'
import { useMediaQuery } from '@/hooks/use-media-query'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog'
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'

import { ChangeCabinModal } from '@/components/guests/change-cabin-modal'
import { ImageCapture } from '@/components/ui/image-capture'

// Type definitions
export interface GuestPreferences {
  food: string[]
  drinks: string[]
  allergies: string[]
  roomTemperature: number
  cleaningTime: "Morning" | "Afternoon" | "Evening"
  dndActive: boolean
  dndLocations?: string[]
}

export interface Guest {
  id: number
  name: string
  room: string | null
  status: string
  isVip: boolean
  guestType: "Owner" | "Guest" | "Family" | "Staff" | "Charter"
  imageUrl?: string | null
  partySize: number
  arrivalDate: string
  departureDate: string
  notes?: string | null
  assignedCrew?: string | null
  location?: string | null
  nationality?: string | null
  languagesSpoken: string[]
  tags: string[]
  preferences: GuestPreferences
  serviceRequests?: any[]
  broker?: string | null
}

// Guest Card Component - Used in the list view
const GuestCard = ({ 
  guest, 
  onSelect,
  onUpdate,
  onCheckOut,
  onChangeCabin,
  onDelete 
}: { 
  guest: Guest
  onSelect: (guest: Guest) => void
  onUpdate: (id: number, data: any) => Promise<boolean>
  onCheckOut: (id: number) => Promise<boolean>
  onChangeCabin: (id: number) => void
  onDelete: (id: number) => Promise<boolean>
}) => {
  const arrivalDate = new Date(guest.arrivalDate)
  const departureDate = new Date(guest.departureDate)
  const daysLeft = Math.ceil((departureDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
  
  const hasAllergies = guest.preferences?.allergies && guest.preferences.allergies.length > 0
  
  return (
    <div 
      className="border rounded-lg p-4 bg-card hover:shadow-md transition-all cursor-pointer"
      onClick={() => onSelect(guest)}
    >
      <div className="flex justify-between items-start">
        <div className="flex gap-3">
          <div className="relative">
            <Avatar className="h-12 w-12">
              {guest.imageUrl ? (
                <AvatarImage src={guest.imageUrl} alt={guest.name} />
              ) : (
                <AvatarFallback>
                  {guest.name.charAt(0)}
                </AvatarFallback>
              )}
            </Avatar>
            {guest.isVip && (
              <span className="absolute -top-1 -right-1 bg-amber-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
                â˜…
              </span>
            )}
          </div>
          
          <div>
            <h3 className="font-medium text-base">{guest.name}</h3>
            <div className="flex items-center gap-1 mt-1 flex-wrap">
              <Badge variant="outline" className={
                guest.guestType === "Owner" ? "bg-purple-100 text-purple-800" :
                guest.guestType === "Family" ? "bg-green-100 text-green-800" :
                guest.guestType === "Guest" ? "bg-blue-100 text-blue-800" :
                guest.guestType === "Staff" ? "bg-gray-100 text-gray-800" :
                "bg-amber-100 text-amber-800"
              }>
                {guest.guestType}
              </Badge>
              {guest.room && (
                <span className="text-xs text-muted-foreground">{guest.room}</span>
              )}
            </div>
          </div>
        </div>
        
        <div className="text-right text-sm">
          <div className={`font-medium ${daysLeft <= 1 ? 'text-red-500' : ''}`}>
            {daysLeft > 0 ? `${daysLeft} days left` : 'Departing today'}
          </div>
          <div className="text-xs text-muted-foreground">
            {departureDate.toLocaleDateString()}
          </div>
        </div>
      </div>
      
      {/* Quick Info - Most important details visible at a glance */}
      <div className="mt-3 pt-3 border-t border-border">
        <div className="flex flex-wrap gap-1.5">
          {/* Nationality */}
          {guest.nationality && (
            <Badge variant="outline" className="bg-gray-50">
              {guest.nationality}
            </Badge>
          )}
          
          {/* Languages */}
          {guest.languagesSpoken && guest.languagesSpoken.slice(0, 2).map(lang => (
            <Badge key={lang} variant="outline" className="bg-blue-50 text-blue-700">
              {lang}
            </Badge>
          ))}
          
          {/* Allergies - High visibility if present */}
          {hasAllergies && (
            <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200 font-medium flex items-center">
              <AlertCircle className="h-3 w-3 mr-1" />
              Allergies
            </Badge>
          )}

          {/* Food Preferences */}
          {guest.preferences?.food && guest.preferences.food.length > 0 && (
            <Badge variant="outline" className="bg-green-50 text-green-700">
              Food Preferences
            </Badge>
          )}
          
          {/* Truncated badges indicator if there are more languages or preferences */}
          {((guest.languagesSpoken && guest.languagesSpoken.length > 2) || 
            (guest.preferences?.food && guest.preferences.food.length > 1)) && (
            <Badge variant="outline" className="bg-slate-50">
              <Info className="h-3 w-3" />
            </Badge>
          )}
        </div>
      </div>
    </div>
  )
}

// GuestDetailPanel - Enhanced detailed view with better organization
export const GuestDetailPanel = ({
  guest,
  onClose,
  onUpdate,
  onCheckOut,
  onChangeCabin,
  onDelete
}: {
  guest: Guest | null
  onClose: () => void
  onUpdate: (id: number, data: any) => Promise<boolean>
  onCheckOut: (id: number) => Promise<boolean>
  onChangeCabin: (id: number) => void
  onDelete: (id: number) => Promise<boolean>
}) => {
  const { toast } = useToast()
  const [isEditing, setIsEditing] = useState(false)
  const [imageUploadLoading, setImageUploadLoading] = useState(false)
  const [showImageDialog, setShowImageDialog] = useState(false)
  
  // Define states for editable fields
  const [editData, setEditData] = useState({
    notes: guest?.notes || "",
    imageUrl: guest?.imageUrl || "",
    nationality: guest?.nationality || "",
    languagesSpoken: guest?.languagesSpoken || [],
    tags: guest?.tags || [],
    preferences: {
      ...guest?.preferences
    }
  })
  
  // Update edit data when guest changes
  useEffect(() => {
    if (guest) {
      setEditData({
        notes: guest.notes || "",
        imageUrl: guest.imageUrl || "",
        nationality: guest.nationality || "",
        languagesSpoken: guest.languagesSpoken || [],
        tags: guest.tags || [],
        preferences: {
          ...guest.preferences
        }
      })
      setIsEditing(false)
    }
  }, [guest])
  
  if (!guest) return null
  
  // Handle image capture from the ImageCapture component
  const handleImageCapture = async (imageData: string | null) => {
    if (!imageData) return
    
    try {
      setImageUploadLoading(true)
      
      const response = await fetch('/api/upload', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-auth-bypass': 'true'
        },
        body: JSON.stringify({ image: imageData })
      })
      
      if (!response.ok) {
        throw new Error('Image upload failed')
      }
      
      const data = await response.json()
      setEditData(prev => ({ ...prev, imageUrl: data.imageUrl }))
      
      // Auto-save if not already in edit mode
      if (!isEditing) {
        await onUpdate(guest.id, { imageUrl: data.imageUrl })
        toast({
          title: "Image updated",
          description: "Guest profile image has been updated successfully."
        })
      }
      
      setShowImageDialog(false)
    } catch (err) {
      console.error('Error uploading image:', err)
      toast({
        title: "Error",
        description: "Failed to upload image. Please try again.",
        variant: "destructive"
      })
    } finally {
      setImageUploadLoading(false)
    }
  }
  
  // Save changes to guest data
  const handleSaveChanges = async () => {
    try {
      const success = await onUpdate(guest.id, editData)
      
      if (success) {
        setIsEditing(false)
        toast({
          title: "Changes saved",
          description: "Guest information has been updated successfully."
        })
      }
    } catch (err) {
      console.error('Error saving changes:', err)
      toast({
        title: "Error",
        description: "Failed to save changes. Please try again.",
        variant: "destructive"
      })
    }
  }
  
  // Calculate days of stay
  const arrivalDate = new Date(guest.arrivalDate)
  const departureDate = new Date(guest.departureDate)
  const stayDuration = Math.ceil((departureDate.getTime() - arrivalDate.getTime()) / (1000 * 60 * 60 * 24))
  const daysRemaining = Math.ceil((departureDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
  
  // Check if guest has allergies for prominent display
  const hasAllergies = guest.preferences?.allergies && guest.preferences.allergies.length > 0
  
  return (
    <div className="p-4 space-y-6">
      {/* Header with basic info and controls */}
      <div className="flex justify-between items-start">
        <div className="flex items-center gap-4">
          <div className="relative">
            {/* Profile image with ImageCapture integration */}
            <div 
              className="relative group cursor-pointer"
              onClick={() => setShowImageDialog(true)}
            >
              <Avatar className="h-20 w-20 border shadow-sm">
                {editData.imageUrl ? (
                  <AvatarImage src={editData.imageUrl} alt={guest.name} />
                ) : (
                  <AvatarFallback className="bg-primary/10 text-primary text-lg">
                    {guest.name.split(' ').map(n => n[0]).join('')}
                  </AvatarFallback>
                )}
              </Avatar>
              
              {/* Image upload/capture overlay */}
              <div className="absolute inset-0 bg-black/30 text-white rounded-full opacity-0 group-hover:opacity-100 
                            flex items-center justify-center transition-opacity duration-200">
                <Camera className="h-6 w-6" />
              </div>
            </div>
            
            {/* Image capture dialog */}
            <Dialog open={showImageDialog} onOpenChange={setShowImageDialog}>
              <DialogTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="absolute bottom-0 right-0 h-7 w-7 rounded-full bg-primary text-primary-foreground"
                  onClick={(e) => {
                    e.stopPropagation()
                    setShowImageDialog(true)
                  }}
                >
                  <Camera className="h-4 w-4" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Update Guest Photo</DialogTitle>
                </DialogHeader>
                <div className="py-6">
                  <ImageCapture 
                    onImageCapture={handleImageCapture}
                    initialImage={editData.imageUrl || null}
                  />
                </div>
              </DialogContent>
            </Dialog>
          </div>
          
          <div>
            <h2 className="text-2xl font-semibold flex items-center gap-2">
              {guest.name}
              {guest.isVip && (
                <Badge className="bg-amber-100 text-amber-800">VIP</Badge>
              )}
            </h2>
            <div className="flex flex-wrap gap-2 mt-2">
              <Badge variant="outline" className={
                guest.guestType === "Owner" ? "bg-purple-100 text-purple-800" :
                guest.guestType === "Family" ? "bg-green-100 text-green-800" :
                guest.guestType === "Guest" ? "bg-blue-100 text-blue-800" :
                guest.guestType === "Staff" ? "bg-gray-100 text-gray-800" :
                "bg-amber-100 text-amber-800"
              }>
                {guest.guestType}
              </Badge>
              {guest.room && (
                <Badge variant="outline">Room: {guest.room}</Badge>
              )}
              <Badge variant="outline">{guest.status}</Badge>
            </div>
          </div>
        </div>
        
        <div className="flex gap-2">
          {isEditing ? (
            <>
              <Button variant="outline" size="sm" onClick={() => setIsEditing(false)}>
                Cancel
              </Button>
              <Button size="sm" onClick={handleSaveChanges}>
                Save Changes
              </Button>
            </>
          ) : (
            <>
              <Button variant="outline" size="sm" onClick={() => setIsEditing(true)}>
                Edit
              </Button>
              <Button variant="outline" size="sm" onClick={() => onClose()}>
                <X className="h-4 w-4 mr-1" />
                Close
              </Button>
            </>
          )}
        </div>
      </div>
      
      {/* Key information prominently displayed */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
        <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-100 dark:border-blue-800">
          <h3 className="font-medium text-blue-800 dark:text-blue-300 mb-2">Stay Information</h3>
          <div className="space-y-1 text-sm">
            <p>
              <span className="text-muted-foreground">Arrival:</span> {arrivalDate.toLocaleDateString()}
            </p>
            <p>
              <span className="text-muted-foreground">Departure:</span> {departureDate.toLocaleDateString()}
            </p>
            <p>
              <span className="text-muted-foreground">Duration:</span> {stayDuration} days
            </p>
            <p className={`font-medium ${daysRemaining <= 1 ? 'text-red-500' : ''}`}>
              {daysRemaining > 0 ? `${daysRemaining} days remaining` : 'Departing today'}
            </p>
          </div>
        </div>
        
        {hasAllergies && (
          <div className="bg-red-50 dark:bg-red-900/20 rounded-lg p-4 border border-red-100 dark:border-red-800">
            <h3 className="font-medium text-red-800 dark:text-red-300 flex items-center mb-2">
              <AlertCircle className="h-4 w-4 mr-1" />
              Allergies
            </h3>
            <div className="space-y-1">
              {guest.preferences.allergies.map((allergy, index) => (
                <Badge key={index} variant="outline" className="bg-white text-red-700 border-red-200 mr-1 mb-1">
                  {allergy}
                </Badge>
              ))}
            </div>
          </div>
        )}
        
        <div className="bg-gray-50 dark:bg-gray-800/30 rounded-lg p-4 border">
          <h3 className="font-medium mb-2">Languages</h3>
          <div className="flex flex-wrap gap-1">
            {guest.languagesSpoken && guest.languagesSpoken.length > 0 ? (
              guest.languagesSpoken.map((language, index) => (
                <Badge key={index} variant="outline" className="bg-white">
                  {language}
                </Badge>
              ))
            ) : (
              <span className="text-sm text-muted-foreground">No languages specified</span>
            )}
          </div>
        </div>
      </div>
      
      {/* Collapsible sections for detailed information */}
      <div className="space-y-4">
        {/* Food Preferences */}
        <Collapsible defaultOpen className="border rounded-lg">
          <CollapsibleTrigger className="flex justify-between items-center w-full p-4">
            <h3 className="font-medium">Food & Drink Preferences</h3>
          </CollapsibleTrigger>
          <CollapsibleContent className="p-4 pt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="text-sm text-muted-foreground mb-2">Food Preferences</h4>
                <div className="flex flex-wrap gap-1">
                  {guest.preferences.food && guest.preferences.food.length > 0 ? (
                    guest.preferences.food.map((item, index) => (
                      <Badge key={index} variant="outline" className="bg-green-50">
                        {item}
                      </Badge>
                    ))
                  ) : (
                    <span className="text-sm text-muted-foreground">No food preferences specified</span>
                  )}
                </div>
              </div>
              <div>
                <h4 className="text-sm text-muted-foreground mb-2">Drink Preferences</h4>
                <div className="flex flex-wrap gap-1">
                  {guest.preferences.drinks && guest.preferences.drinks.length > 0 ? (
                    guest.preferences.drinks.map((item, index) => (
                      <Badge key={index} variant="outline" className="bg-blue-50">
                        {item}
                      </Badge>
                    ))
                  ) : (
                    <span className="text-sm text-muted-foreground">No drink preferences specified</span>
                  )}
                </div>
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
        
        {/* Room Preferences */}
        <Collapsible className="border rounded-lg">
          <CollapsibleTrigger className="flex justify-between items-center w-full p-4">
            <h3 className="font-medium">Room Preferences</h3>
          </CollapsibleTrigger>
          <CollapsibleContent className="p-4 pt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="text-sm text-muted-foreground mb-2">Room Temperature</h4>
                <Badge variant="outline">
                  {guest.preferences.roomTemperature}Â°C
                </Badge>
              </div>
              <div>
                <h4 className="text-sm text-muted-foreground mb-2">Cleaning Time</h4>
                <Badge variant="outline">
                  {guest.preferences.cleaningTime}
                </Badge>
              </div>
              <div className="md:col-span-2">
                <h4 className="text-sm text-muted-foreground mb-2">Do Not Disturb</h4>
                <Badge variant="outline" className={guest.preferences.dndActive ? "bg-red-50 text-red-700" : ""}>
                  {guest.preferences.dndActive ? "Active" : "Not Active"}
                </Badge>
                {guest.preferences.dndActive && guest.preferences.dndLocations && guest.preferences.dndLocations.length > 0 && (
                  <div className="mt-2">
                    <p className="text-xs text-muted-foreground">Locations:</p>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {guest.preferences.dndLocations.map((location, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {location}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
        
        {/* Notes */}
        <Collapsible className="border rounded-lg">
          <CollapsibleTrigger className="flex justify-between items-center w-full p-4">
            <h3 className="font-medium">Notes</h3>
          </CollapsibleTrigger>
          <CollapsibleContent className="p-4 pt-0">
            {guest.notes ? (
              <div className="p-3 bg-muted/20 rounded-md">
                {guest.notes}
              </div>
            ) : (
              <div className="text-sm text-muted-foreground">No notes available</div>
            )}
          </CollapsibleContent>
        </Collapsible>
      </div>
      
      {/* Action Buttons */}
      <div className="flex justify-end gap-2 pt-4 border-t">
        <Button variant="outline" onClick={() => onChangeCabin(guest.id)}>
          Change Room
        </Button>
        <Button variant="outline" onClick={() => onCheckOut(guest.id)}>
          Check Out
        </Button>
        <Button variant="destructive" onClick={() => {
          if (confirm("Are you sure you want to delete this guest?")) {
            onDelete(guest.id)
          }
        }}>
          Delete
        </Button>
      </div>
    </div>
  )
}

// Simplified ChangeCabin component that works with the existing ChangeCabinModal
// This is just an adapter between our new implementation and the old modal component
function SimplifiedChangeCabinModal({
  isOpen, 
  onClose, 
  onConfirm 
}: {
  isOpen: boolean
  onClose: () => void
  onConfirm: (room: string) => Promise<void>
}) {
  // Sample available rooms (these should be fetched from an API in a real implementation)
  const availableRooms = [
    "Master Cabin", 
    "VIP Suite 1", 
    "VIP Suite 2",
    "Guest Cabin 1",
    "Guest Cabin 2",
    "Guest Cabin 3",
    "Guest Cabin 4"
  ]
  
  // Sample current guest - this would be the selected guest in a real implementation
  const mockGuest = {
    id: 999,
    name: "Guest",
    room: null,
    isVip: false
  }
  
  // Sample guests list - this would come from the guests state in a real implementation
  const mockAllGuests: any[] = []
  
  // Adapter function to connect the old modal interface with our new implementation
  const handleUpdateRoom = (guestId: number, oldRoom: string | null, newRoom: string) => {
    onConfirm(newRoom)
  }
  
  return (
    <ChangeCabinModal
      isOpen={isOpen}
      onClose={onClose}
      guest={mockGuest}
      availableRooms={availableRooms}
      allGuests={mockAllGuests}
      onUpdateRoom={handleUpdateRoom}
    />
  )
}

// Main Guests Page Component
export default function GuestsPage() {
  const isMobile = useMediaQuery("(max-width: 768px)")
  const { toast } = useToast()
  const router = useRouter()
  
  // State for guests data and UI controls
  const [guests, setGuests] = useState<Guest[]>([])
  const [filteredGuests, setFilteredGuests] = useState<Guest[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [filterType, setFilterType] = useState<string>("all")
  const [selectedGuest, setSelectedGuest] = useState<Guest | null>(null)
  const [showCabinModal, setShowCabinModal] = useState(false)
  const [cabinModalGuestId, setCabinModalGuestId] = useState<number | null>(null)

  // Fetch all guests on component mount
  useEffect(() => {
    fetchGuests()
  }, [])

  // Apply filters and search whenever dependencies change
  useEffect(() => {
    if (!guests.length) return
    
    let result = [...guests]
    
    // Apply type filter
    if (filterType !== "all") {
      result = result.filter(guest => 
        guest.guestType === filterType || 
        (filterType === "VIP" && guest.isVip)
      )
    }
    
    // Apply search query
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim()
      result = result.filter(guest => 
        guest.name.toLowerCase().includes(query) || 
        (guest.room && guest.room.toLowerCase().includes(query)) ||
        (guest.nationality && guest.nationality.toLowerCase().includes(query))
      )
    }
    
    setFilteredGuests(result)
  }, [guests, searchQuery, filterType])

  // Fetch all guests from API
  const fetchGuests = async () => {
    try {
      setLoading(true)
      setError(null)
      
      const response = await fetch('/api/guests', {
        headers: {
          'x-auth-bypass': 'true'
        }
      })
      
      if (!response.ok) {
        throw new Error('Failed to fetch guests')
      }
      
      const data = await response.json()
      
      // Parse dates and sort by arrival date
      const guestsWithParsedDates = data.map((guest: any) => ({
        ...guest,
        arrivalDate: guest.arrivalDate,
        departureDate: guest.departureDate
      }))
      
      // Sort by latest arrival date first
      const sortedGuests = guestsWithParsedDates.sort((a: Guest, b: Guest) => {
        return new Date(b.arrivalDate).getTime() - new Date(a.arrivalDate).getTime()
      })
      
      setGuests(sortedGuests)
      setFilteredGuests(sortedGuests)
    } catch (err) {
      console.error('Error fetching guests:', err)
      setError('Failed to load guests data. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  // Update guest information
  const handleUpdateGuest = async (id: number, data: any): Promise<boolean> => {
    try {
      const response = await fetch('/api/guests', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'x-auth-bypass': 'true'
        },
        body: JSON.stringify({
          id,
          ...data
        })
      })
      
      if (!response.ok) {
        throw new Error('Failed to update guest')
      }
      
      const updatedGuest = await response.json()
      
      // Update guests state with the updated guest
      setGuests(prevGuests => 
        prevGuests.map(guest => 
          guest.id === id ? { ...guest, ...updatedGuest } : guest
        )
      )
      
      // If currently selected, update selected guest too
      if (selectedGuest && selectedGuest.id === id) {
        setSelectedGuest({ ...selectedGuest, ...updatedGuest })
      }
      
      return true
    } catch (err) {
      console.error('Error updating guest:', err)
      toast({
        title: "Error",
        description: "Failed to update guest information",
        variant: "destructive"
      })
      return false
    }
  }

  // Handle guest checkout
  const handleCheckOut = async (id: number): Promise<boolean> => {
    try {
      const response = await fetch('/api/guests', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'x-auth-bypass': 'true'
        },
        body: JSON.stringify({
          id,
          status: "Checked-Out"
        })
      })
      
      if (!response.ok) {
        throw new Error('Failed to check out guest')
      }
      
      // Update guests state to reflect status change
      setGuests(prevGuests => 
        prevGuests.map(guest => 
          guest.id === id ? { ...guest, status: "Checked-Out" } : guest
        )
      )
      
      toast({
        title: "Success",
        description: "Guest has been checked out."
      })
      
      // If this was the selected guest, close the detail panel
      if (selectedGuest && selectedGuest.id === id) {
        setSelectedGuest(null)
      }
      
      return true
    } catch (err) {
      console.error('Error checking out guest:', err)
      toast({
        title: "Error",
        description: "Failed to check out guest",
        variant: "destructive"
      })
      return false
    }
  }

  // Handle cabin/room change modal
  const handleChangeCabin = (id: number) => {
    setCabinModalGuestId(id)
    setShowCabinModal(true)
  }

  // Handle guest deletion
  const handleDeleteGuest = async (id: number): Promise<boolean> => {
    try {
      const response = await fetch(`/api/guests?id=${id}`, {
        method: 'DELETE',
        headers: {
          'x-auth-bypass': 'true'
        }
      })
      
      if (!response.ok) {
        throw new Error('Failed to delete guest')
      }
      
      // Remove guest from state
      setGuests(prevGuests => prevGuests.filter(guest => guest.id !== id))
      
      toast({
        title: "Success",
        description: "Guest has been deleted."
      })
      
      // If this was the selected guest, close the detail panel
      if (selectedGuest && selectedGuest.id === id) {
        setSelectedGuest(null)
      }
      
      return true
    } catch (err) {
      console.error('Error deleting guest:', err)
      toast({
        title: "Error",
        description: "Failed to delete guest",
        variant: "destructive"
      })
      return false
    }
  }

  // Handle cabin change confirmation from modal
  const handleCabinChangeConfirm = async (room: string) => {
    if (!cabinModalGuestId) return
    
    const success = await handleUpdateGuest(cabinModalGuestId, { room })
    
    if (success) {
      toast({
        title: "Room Updated",
        description: "Guest has been assigned to a new room."
      })
    }
    
    setShowCabinModal(false)
    setCabinModalGuestId(null)
  }

  return (
    <div className="container mx-auto px-4 py-6">
      <div className="flex flex-col gap-6">
        {/* Header with title and actions */}
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <h1 className="text-2xl font-bold">Guests</h1>
          
          {/* Search and filter controls */}
          <div className="flex flex-col md:flex-row gap-3 md:w-auto w-full">
            <div className="relative flex-grow max-w-md">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search guests..."
                className="pl-8"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              {searchQuery && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute right-0 top-0 h-9 w-9"
                  onClick={() => setSearchQuery("")}
                >
                  <X className="h-4 w-4" />
                </Button>
              )}
            </div>
            
            <Select value={filterType} onValueChange={setFilterType}>
              <SelectTrigger className="w-[180px] shrink-0">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Filter by type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Guests</SelectItem>
                <SelectItem value="VIP">VIP Guests</SelectItem>
                <SelectItem value="Owner">Owners</SelectItem>
                <SelectItem value="Guest">Guests</SelectItem>
                <SelectItem value="Family">Family</SelectItem>
                <SelectItem value="Staff">Staff</SelectItem>
                <SelectItem value="Charter">Charter</SelectItem>
              </SelectContent>
            </Select>
            
            <Button variant="default" onClick={() => router.push("/add-guest")}>
              <UserPlus className="h-4 w-4 mr-2" />
              Add Guest
            </Button>
          </div>
        </div>
        
        {/* Loading and error states */}
        {loading ? (
          <div className="flex justify-center py-10">
            <Spinner className="h-8 w-8" />
          </div>
        ) : error ? (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        ) : (
          <>
            {/* Display guest content based on view (list and detail) */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Guests list - takes full width on mobile, 1/3 on desktop */}
              <div className={isMobile && selectedGuest ? "hidden" : "md:col-span-1"}>
                <div className="space-y-4">
                  {filteredGuests.length === 0 ? (
                    <div className="text-center py-10 text-muted-foreground">
                      No guests found matching your search
                    </div>
                  ) : (
                    <>
                      <div className="text-sm text-muted-foreground">
                        {filteredGuests.length} {filteredGuests.length === 1 ? 'guest' : 'guests'} found
                      </div>
                      <div className="space-y-3">
                        {filteredGuests.map(guest => (
                          <GuestCard
                            key={guest.id}
                            guest={guest}
                            onSelect={setSelectedGuest}
                            onUpdate={handleUpdateGuest}
                            onCheckOut={handleCheckOut}
                            onChangeCabin={handleChangeCabin}
                            onDelete={handleDeleteGuest}
                          />
                        ))}
                      </div>
                    </>
                  )}
                </div>
              </div>
              
              {/* Guest detail panel - hidden on mobile until a guest is selected */}
              {(selectedGuest || !isMobile) && (
                <div className="md:col-span-2 border rounded-lg overflow-hidden bg-card">
                  {selectedGuest ? (
                    <GuestDetailPanel
                      guest={selectedGuest}
                      onClose={() => setSelectedGuest(null)}
                      onUpdate={handleUpdateGuest}
                      onCheckOut={handleCheckOut}
                      onChangeCabin={handleChangeCabin}
                      onDelete={handleDeleteGuest}
                    />
                  ) : (
                    <div className="flex flex-col items-center justify-center p-8 h-96 text-center">
                      <UserPlus className="h-12 w-12 text-muted-foreground mb-4" />
                      <h3 className="text-lg font-medium mb-2">No Guest Selected</h3>
                      <p className="text-muted-foreground max-w-md">
                        Select a guest from the list to view their details, update their information,
                        or check them out.
                      </p>
                    </div>
                  )}
                </div>
              )}
            </div>
          </>
        )}
      </div>
      
      {/* Room change modal - Using adapter component */}
      {showCabinModal && (
        <SimplifiedChangeCabinModal
          isOpen={showCabinModal}
          onClose={() => {
            setShowCabinModal(false)
            setCabinModalGuestId(null)
          }}
          onConfirm={handleCabinChangeConfirm}
        />
      )}
    </div>
  )
}